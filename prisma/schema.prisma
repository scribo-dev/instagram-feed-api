// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?    @db.Text
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  accounts      Account[]
  sessions      Session[]
  ApiToken      ApiToken[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model InstagramAccount {
  username    String     @id
  id          String?
  accessToken String?    @db.Text()
  // instagramAccessTokenExpiry DateTime
  // apiToken    ApiToken @relation(fields: [apiTokenId], references: [id])
  // apiTokenId  String
  apiTokens   ApiToken[]
  updatedAt   DateTime   @updatedAt
  createdAt   DateTime   @default(now())
  // Relations
  // Publications Publication[]
  // Shop         Shop[]
  // StoryMedia   StoryMedia[]
  // ApiToken             ApiToken? @relation(fields: [apiTokenId], references: [id])
  // apiTokenId           String?

  // @@unique([username, apiTokenId])
  // @@index([apiTokenId])
  media Media[]
}

model ApiToken {
  id          String  @id
  description String?
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  accounts InstagramAccount[]

  @@index([userId])
}

enum MediaProductType {
  AD
  FEED
  STORY
  REELS
}

enum MediaType {
  CAROUSEL_ALBUM
  IMAGE
  VIDEO
}

model Media {
  id               String            @id
  caption          String?           @db.Text()
  mediaProductType MediaProductType?
  mediaType        MediaType
  thumbnailUrl     String?           @db.Text()
  mediaUrl         String            @db.Text()
  shortcode        String
  timestamp        DateTime?
  username         String
  user             InstagramAccount  @relation(fields: [username], references: [username], onDelete: Cascade)

  children Media[] @relation("SubMedias")
  parent   Media?  @relation("SubMedias", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String?

  sizes Json?

  @@index([username])
  @@index([parentId])
}
